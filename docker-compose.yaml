services:

  frontend:
    container_name: frontend
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      - "8080:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0

  orchestrator:
    container_name: orchestrator
    build:
      context: ./
      dockerfile: ./orchestrator/Dockerfile
    ports:
      - 8081:5000
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/orchestrator/src/app.py
      - PYTHONPATH=/app/orchestrator/src
    volumes:
      - ./orchestrator/src:/app/orchestrator/src

  fraud_detection:
    container_name: fraud_detection
    build:
      context: ./
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      - 50051:50051
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/fraud_detection/src/app.py
      - PYTHONPATH=/app/fraud_detection/src
    volumes:
      - ./fraud_detection/src:/app/fraud_detection/src

  transaction_verification:
    container_name: transaction_verification
    build:
      context: ./
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      - 50052:50052
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/transaction_verification/src/app.py    
      - PYTHONPATH=/app/transaction_verification/src
    volumes:
      - ./transaction_verification/src:/app/transaction_verification/src

  suggestions:
    container_name: suggestions
    build:
      context: ./
      dockerfile: ./suggestions/Dockerfile
    ports:
      - 50053:50053
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/suggestions/src/app.py
      - PYTHONPATH=/app/suggestions/src
    volumes:
      - ./suggestions/src:/app/suggestions/src

  orderqueue:
    container_name: orderqueue
    build:
      context: ./
      dockerfile: ./order_queue/Dockerfile
    ports:
      - 50054:50054
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_queue/src/app.py
      - PYTHONPATH=/app/order_queue/src
    volumes:
      - ./order_queue/src:/app/order_queue/src

  orderexecutor1:
    hostname: orderexecutor1
    container_name: orderexecutor1
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50055:50055"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - PYTHONPATH=/app/order_executor/src
    volumes:
      - ./order_executor/src:/app/order_executor/src
  
  orderexecutor2:
    hostname: orderexecutor2
    container_name: orderexecutor2
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50056:50055"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - PYTHONPATH=/app/order_executor/src
    volumes:
      - ./order_executor/src:/app/order_executor/src

  orderexecutor3:
    hostname: orderexecutor3
    container_name: orderexecutor3
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50057:50055"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - PYTHONPATH=/app/order_executor/src
    volumes:
      - ./order_executor/src:/app/order_executor/src

  # Use .env file if it ever stops being a sandbox project
  dbnode1:
    hostname: dbnode1
    container_name: dbnode1
    build:
      context: ./
      dockerfile: ./dbnode/Dockerfile
    ports:
      - "50058:50056"
    volumes:
      - ./dbnode/src:/app/dbnode/src
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/dbnode/src/app.py
      - PYTHONPATH=/app/dbnode/src

  dbnode2:
    hostname: dbnode2
    container_name: dbnode2
    build:
      context: ./
      dockerfile: ./dbnode/Dockerfile
    ports:
      - "50059:50056"
    volumes:
      - ./dbnode/src:/app/dbnode/src
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/dbnode/src/app.py
      - PYTHONPATH=/app/dbnode/src

  dbnode3:
    hostname: dbnode3
    container_name: dbnode3
    build:
      context: ./
      dockerfile: ./dbnode/Dockerfile
    ports:
      - "50060:50056"
    volumes:
      - ./dbnode/src:/app/dbnode/src
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/dbnode/src/app.py
      - PYTHONPATH=/app/dbnode/src

  mongodb1:
    hostname: mongodb1
    container_name: mongodb1
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb1_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=bookstore
      - MONGO_USER=mongo
      - MONGO_PASSWORD=mongo
      - MONGO_DB=bookstore

  mongodb2:
    hostname: mongodb2
    container_name: mongodb2
    image: mongo:latest
    ports:
      - "27018:27017"
    volumes:
      - mongodb2_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=bookstore
      - MONGO_USER=mongo
      - MONGO_PASSWORD=mongo
      - MONGO_DB=bookstore

  mongodb3:
    hostname: mongodb3
    container_name: mongodb3
    image: mongo:latest
    ports:
      - "27019:27017"
    volumes:
      - mongodb3_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=bookstore
      - MONGO_USER=mongo
      - MONGO_PASSWORD=mongo
      - MONGO_DB=bookstore

volumes:
  mongodb1_data:
  mongodb2_data:
  mongodb3_data: